# import math library
import math 

# 1) Вероятность того, что стрелок попадет в мишень, выстрелив один раз, равна 0.8. 
# Стрелок выстрелил 100 раз. 
# Найдите вероятность того, что стрелок попадет в цель ровно 85 раз

'''
Используется уравненение Бернулли т.к. кол-во исытаний n<=100:
P = C * p^k * (1-p)^(n-k)

Применяется формула "combinations", поскольку n>k и порядок не важен.

- число для комбинаций для 85 попаданий из 100
k=85 (85 попаданий), n=100 (общее число выстрелов)
- вероятность попадания p=0.8
'''

# task 1
def prob_1():

    # constants
    p = 0.8
    k = 85
    n = 100

    # probability
    comb = math.comb(n, k)
    prob = comb * (p ** k) * ((1 - p) ** (n - k)) 
    
    # print out results
    print(f'task_1:  {prob}')            

prob_1()

# 2) Вероятность того, что лампочка перегорит в течение первого дня эксплуатации, равна 0.0004. 
# В жилом комплексе после ремонта в один день включили 5000 новых лампочек. 
# Какова вероятность, что ни одна из них не перегорит в первый день? 
# Какова вероятность, что перегорят ровно две?

'''
Используется уравненение Пуассона т.к. кол-во исытаний n>100:
P = (lambda^m / m!) * e^(-lambda)

Средняя частота события:
lambda = n * p

- p=0.0004 (вероятность перегорания),  
- n=5000 (общее число лампочек)
- m=0 (при условии, что ни одна лампочка не перегорит)
- m=2 (при условии, что перегорят 2 лампочки)
'''

# task 2
def prob_2():

    # constants
    p = 0.0004
    n = 5000
    m1 = 0
    m2 = 2

    # avg frequency
    lmbda = n * p
    
    # probability (if m=0 and m=2)
    prob1 = ((lmbda ** m1) / math.factorial(m1)) * (math.e ** (-lmbda))
    prob2 = ((lmbda ** m2) / math.factorial(m2)) * (math.e ** (-lmbda))

    # print out results
    print(f'task_2a: {prob1}\ntask_2b: {prob2}')        

prob_2()

# 3) Монету подбросили 144 раза. 
# Какова вероятность, что орел выпадет ровно 70 раз?

'''
Используется уравненение Бернулли т.к. кол-во исытаний n<=100:
P = C * p^k * (1-p)^(n-k)

Применяется формула "combinations", поскольку n>k и порядок не важен.

- число для комбинаций для 70 орлов из 144 бросков
k=70 (70 орлов), n=144 (общее число бросков)
- вероятность выпадения орла p=0.5
'''

# task 3
def prob_3():

    # constants
    p = 0.5
    k = 70
    n = 144

    # probability
    comb = math.comb(n, k)
    prob = comb * (p ** k) * ((1 - p) ** (n - k)) 
    
    # print out results
    print(f'task_3:  {prob}')            

prob_3()

# 4) В первом ящике находится 10 мячей, из которых 7 - белые. 
# Во втором ящике - 11 мячей, из которых 9 белых. 
# Из каждого ящика вытаскивают случайным образом по два мяча. 
# Какова вероятность того, что все мячи белые? 
# Какова вероятность того, что ровно два мяча белые? 
# Какова вероятность того, что хотя бы один мяч белый?

'''
(a) 1 благоприятный исход (ББ)(ББ)

(b) 6 благоприятных исходов:
(ББ)(ЧЧ)+(БЧ)(БЧ)+(БЧ)(ЧБ)+(ЧБ)(ЧБ)+(ЧЧ)(ББ) 

(c) Решение от обратного. 
Найдем вероятность, чтовытащят все черные мячи (ЧЧ)(ЧЧ).
Далее, вычтем полученное из 1.
'''

# task 4
def prob_4():
    
    prob1 = 7/10 * 6/9 * 9/11 * 8/10

    prob2 = (7/10 * 6/9 * 2/11 * 1/10)\
        + (7/10 * 3/9 * 9/11 * 2/10)\
        + (7/10 * 3/9 * 2/11 * 9/10)\
        + (3/10 * 7/9 * 9/11 * 2/10)\
        + (3/10 * 7/9 * 2/11 * 9/10)\
        + (3/10 * 2/9 * 9/11 * 8/10)            

    prob3 = 1 - (3/10 * 2/9 * 2/11 * 1/10)

    # print out results
    print(f'task_4a: {prob1}\ntask_4b: {prob2}\ntask_4c: {prob3}')

prob_4()    